//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DraftApp
{
    using System;
    using System.Collections.Generic;
    
    public partial class Materials
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Materials()
        {
            this.Suppliers = new HashSet<Suppliers>();
        }
    
        public int IdM { get; set; }
        public string Name { get; set; }
        public int IdTM { get; set; }
        public byte[] Image { get; set; }
        public decimal Cost { get; set; }
        public int QuantityStock { get; set; }
        public int MinimumAllowableQuantity { get; set; }
        public int QuantityPackage { get; set; }
        public int IdUM { get; set; }
        public string Description { get; set; }
    
        public virtual TypesMaterials TypesMaterials { get; set; }
        public virtual UnitsMeasurement UnitsMeasurement { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Suppliers> Suppliers { get; set; }
        public virtual List<string> SuppliersName
        {
            get
            {
                List<string> sn = new List<string>();
                foreach (Suppliers suppliers in Suppliers)
                    sn.Add(suppliers.Name);
                return sn;
            }
        }
        public string Expenses
        {
            get
            {
                if (QuantityStock < MinimumAllowableQuantity)
                {
                    int res = MinimumAllowableQuantity - QuantityStock;
                    int min = res / QuantityPackage;
                    if (res % QuantityPackage > 0)
                        min++;
                    var sum = min * QuantityPackage * Cost;
                    return $"Минимальный объем закупки: {res} шт. или {min} уп., что составляет {Math.Round(sum, 2)} руб.";
                }
                return "";
            }
        }
    }
}
